<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>关于 Jenkins X on Jenkins X</title>
    <link>https://hferentschik.github.io/jenkins-x-website/zh/about/</link>
    <description>Recent content in 关于 Jenkins X on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 01 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hferentschik.github.io/jenkins-x-website/zh/about/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>特色</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/about/features/</link>
      <pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/about/features/</guid>
      <description>命令行 Jenkins X 带来了一个方便使用的命令行工具 jx ：
 安装 Jenkins X 到你已经存在的 Kubernetes 集群 创建一个新的 kubernetes 集群 并把 Jenkins X 安装进去 导入项目 到 Jenkins X 中以及他们的持续部署流水线设置 创建新的 Spring Boot 应用 并导入 Jenkins X 中，以及他们的持续部署流水线设置  流水线 不必深入了解 Jenkins 流水线的内部，Jenkins X 会默认给你的项目提供一些很好的流水线——基于DevOps 最佳实践实现了所有的持续集成和持续部署
环境 环境指的是应用部署的地方。开发人员通常使用缩写来描述环境，例如：“测试中（Testing）、Staging/UAT或者生产（Production）”。
在 Jenkins X 中每个团队都有一套自己的环境。默认情况下，Jenkins X 会给每个团队创建一个 Staging 和 生产 环境，但你可以通过命令 jx create environment创建一个新的环境。
我们使用 GitOps 来管理要部署到每个环境中的 Kubernetes 资源的配置和版本。因此，每个环境都有自己的 git 仓库，应用在这个环境中运行需要的 Helm Charts、版本以及配置都在库中。
在 Kubernetes 集群中一个环境对应一个命名空间。当 Pull Requests 被合并到环境所在的 git 库后，该环境的流水线就会把 git 库中的 Helm Charts 应用到环境命名空间中。</description>
    </item>
    
    <item>
      <title>加速</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/about/accelerate/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/about/accelerate/</guid>
      <description>Jenkins X 重新构思了云原生时代下的 CI/CD 实现，这些想法受到了 DevOps 状态报告和近来大热的《Accelerate》一书的深刻影响，这本书的三位合著者分别是：Nicole Forsgren、Jez Humble以及Gene Kim。
经年累月基于真实世界中的团队和组织收集上来的数据被 DevOps 领域的思想领袖和数据科学家们进行了深入的分析。《Accelerate》一书总结了一组有助于实施 DevOps 的能力，这些能力被 Jenkins X 实现以帮助用户以开箱即用的方式获取到科学证明过的收益。我们会从已经实现的能力项入手，并不断整合更多的能力进来。
对所有构件进行版本控制 来自 Weaveworks 的天才们创造了 GitOps 的概念，这一点我们非常认同。对环境的任何变更，无论是一个新的应用，版本升级，资源约束变更，还是简单的应用配置，都应该在 Git 上提交一个 Pull Request ，并且采用类似环境的持续集成对这些变更进行验证，并且经过团队的审核，这个团队负责所有相关环境的变更控制。于是针对一个环境的任何变更都可以被追溯并且达到受控状态。
关联的加速能力项：对所有生产构件进行版本控制
自动化部署过程 环境 Jenkins X 在安装过程中会自动创建基于 Git 的环境，并且使用jx create environment命令来轻松地创建新的环境。此外，当通过quickstart(jx create quickstart)创建一个新的基于 Java 中 SpringBoot (jx create spring) 应用，或者导入已有应用(jx import)时，Jenkins X 都会自动帮你添加 CI/CD 流水线，并配置相关任务、git 代码仓库、webhook 来启用自动化部署流程。
Jenkins X 开箱即用地创建了永久的预发布和生产环境（这个是可配置的）以及一个 Pull Request 阶段临时使用的应用预览环境。
预览环境 在一个变更被合入主干之前，我们希望尽可能的进行测试、安全、验证和试验工作。使用临时动态创建的预览环境，任何 Pull Request 都会生成有一个预览版本被构建和部署，包括引用了公共库的下游应用。这就意味着我们可以同任何关联团队进行代码评审，测试和更好的协作，来确认这次变更可以部署到生产环境。
Jenkins X 的终极目标是提供一种方式，帮助开发人员、测试人员、设计人员和产品经理来验证将要合入主干的变更完全符合预期。我们希望确信这次变更没有对任何服务或特性带来负面影响，并且按照预想的那样来交付价值。</description>
    </item>
    
    <item>
      <title>概念</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/about/concepts/</link>
      <pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/about/concepts/</guid>
      <description>Jenkins X 旨在使得 DevOps 原则和最佳实践对于研发人员来说简单。
原则 &amp;ldquo;DevOps 是一套旨在缩短从提交变更到生产发布的时间的实践，同时保证高质量&amp;rdquo;
DevOps项目的目标：
 市场需求 提高部署频率 缩短修复时间 更低的市场错误率 更快的平均恢复时间  相对于行业平均水平——每周一次和每月一次来说，高效的团队应该有能力每天部署多次。
代码从已提交到上生产应该少于一个小时，变更失败率也应该小于15%，而平均值在31-45%之间。
从失败中的平均恢复时间应该少于一个小时。
Jenkins X 设计了第一原则，允许团队采用 DevOps 的最佳实践，来达到行业的最高目标。
实践 下列最佳实践被认为是DevOps成功的关键：
 架构松耦合 自服务配置 自动化管理 持续构建 / 集成和部署 自动发布管理 增量测试 配置即代码  Jenkins X 把大量常见的方法论和组件集成为复杂度最小的方法。
架构 Jenkins X 基于松耦合架构的 DevOps 模型，被设计用来支持在多个团队之间，部署大量可重复、可管理的分布式微服务。
概念模型 构成 Jenkins X 基于以下的核心组件：
Kubernetes 和 Docker Kubernetes 是系统的核心，它已经成为了 DevOps 事实上的虚拟基础设施平台。每个主要的云服务商现在都已经提供了 Kubernetes 基础设施，并且可能已经在很多私有基础设施中也被安装了。测试环境可能也在使用 Minikube 安装器创建本地开发环境。
从功能上，该Kubernetes 平台扩展了 Docker 提供的基本容器化原则，用于跨多个物理节点。
简单来说，Kubernetes 提供了同构的虚拟基础设施，可以通过动态添加或者移除节点实现伸缩。每个节点都在一个大型专用虚拟网络空间里。
Kubernetes 中的部署单元是 Pod，它包含一个或多个 Docker 容器以及一些元数据。Pod 中所有的容器分享同样的虚拟 IP 地址和端口范围。Deployments在 Kubernetes 中是申明式的，因此，用户指定特定版本的 Pod 中部署的实例数量，Kubernetes 据此来计算跨节点中的 Pod 是应该删除或部署。根据标签匹配来决定资源的实例数量。一旦被部署，Kubernetes 就会通过定期的健康检查来保证 Pod 的数量，终止或则替换没响应的 Pod。</description>
    </item>
    
    <item>
      <title>Apache License</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/about/license/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/about/license/</guid>
      <description>Jenkins X is released under the Apache 2.0 license.
Version 2.0, January 2004 http://www.apache.org/licenses/LICENSE-2.0
Terms and Conditions for use, reproduction, and distribution
1. Definitions “License” shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.
“Licensor” shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.
“Legal Entity” shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity.</description>
    </item>
    
  </channel>
</rss>
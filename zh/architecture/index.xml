<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>架构 on Jenkins X</title>
    <link>https://hferentschik.github.io/jenkins-x-website/zh/architecture/</link>
    <description>Recent content in 架构 on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 27 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hferentschik.github.io/jenkins-x-website/zh/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>组件</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/architecture/components/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/architecture/components/</guid>
      <description>Jenkins X 安装的包括：
 每个团队一个开发环境，也就是 kubernetes 命名空间 零或多个其它 永久环境  为每个团队获取各自开箱即用的 Staging 和 生产 环境 每个团队可以按照需要有很多环境，并依据习惯命名  可选的 预览环境  通常，每个环境会关联对应不同的 kubernetes 命名空间 ，以确保环境之间干净隔离。
尽管从技术上讲，两个团队可以共享同样的基础命名空间，比如 Staging，尽管我们建议分开以保持简单——不然的话，在同一个 git 库中配置相同的命名空间可能会发生冲突；例如：服务资源名称或者 DNS 会冲突。如果你希望两个团队共享基础微服务，使用 服务链接 在一个命名空间中连接另外一个会比较简单，这样它们可以通过本地 DNS 以本地服务的形式出现。
开发环境 在开发环境中，我们安装了很多必要的最小核心应用，才能启动基于 Kubernetes 的 CI/CD。
我们还支持 addons 扩展核心套件。
Jenkins X 的配置把这些服务连接起来，就可以直接工作了。这样就神奇地把 Kubernetes 的密码、环境遍历和配置文件全部配置好并可以工作了。
 Jenkins — 提供 CI 和 CD 自动化。这样对 Jenkins 的解耦变得更加云原生，并利用 Kubernetes 的概念，例如：CRDs（自定义资源定义）、存储和伸缩。 Nexus — 作为 Nodejs 和 Java 程序的依赖缓存，可以减少构建时间。一个 SpringBoot 应用的初始化构建后，构建时间能从12分钟减少到4分钟。我们还没有实现，但是已经计划很快用 Artifactory 来替换。 Docker registry — 一个集群中的 docker 注册表（registry），用于我们的流水线推送应用的镜像，我们将很快使用原生的云提供商，例如：Google Container Registry, Azure Container Registry 或 Amazon Elastic Container Registry (ECR)。 ChartMuseum — 一个发布 Helm charts 的注册表 Monocular — 一个用于发现和运行 Helml charts 的 UI  永久环境 这些环境 环境，像 Staging 和 Production 使用 GitOps 来管理他们，因此，每个都有一个包含配置所有应用和服务以及要部署的位置信息的源码的 git 仓库。</description>
    </item>
    
    <item>
      <title>自定义资源</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/architecture/custom-resources/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/architecture/custom-resources/</guid>
      <description>Kubernetes 提供了一个叫做自定义资源的扩展机制，它允许微服务扩展 Kubernetes 平台来解决更高级的问题。
因此，在 Jenkins X 中定义了若干个自定义资源来扩展 Kubernetes 支持 CI/CD：
环境 Jenkins X 原生地支持环境，允许为你们团队定义环境，并通过 jx get environments 查询：
jx get environments 以下的命令都使用 Kubernetes 自定义资源环境。
因此，你还可以通过 kubectl 查询环境：
kubectl get environments 或者你想要通过 YAML 直接编辑它们的话：
kubectl edit env staging 尽管，你使用命令 jx edit environment 会更容易。
发版 Jenkins X 流水线生成了一个自定义资源 发版，我们可以用来跟踪：
 版本、git 标签、git 地址映射到 Kubernetes/Helm 中的发版 Jenkins 流水线地址和执行日志用于执行发布 提交日志、问题和 Pull Requests 是每次发版的一部分，因此我们可以实现在 Staging/生产环境中修复的问题反馈  流水线活动 该资源保存了基于 Jenkins 流水线阶段以及 升级活动 的流水线状态
该资源还会被命令 jx get activities 用到</description>
    </item>
    
    <item>
      <title>构建打包</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/architecture/build-packs/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/architecture/build-packs/</guid>
      <description>我们使用 draft 风格为不同的语言构建打包 ，我们通过导入或者创建他们，运行时和构建工具添加必要的配置文件，因此我们可以在 Kubernetes 中构建和部署他们。
如果由于工程没有被创建或导入而不存在的话，构建包会默认使用下面的文件：
 Dockerfile 把代码构建为不可变的 docker 镜像，准备在 Kubernetes 中运行 Jenkinsfile 为应用使用申明式 Jenkins 流水线定义 CI/CD 步骤 helm chart 在文件夹 charts 中生成可以在 Kubernets 中运行的 Kubernetes 资源 在 charts/preview 文件夹中的 preview chart 定义了基于 Pull Request 部署一个预览环境的所有依赖  默认的构建包在 https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes，每个语言或者构建工具在一个文件夹中。
jx 命令行克隆构建包到你的文件夹 .~/.jx/draft/packs/ ，并在你每次尝试创建或者到一个工程时通过 git pull 来更新他们。
创建新的构建 我们欢迎贡献，因此，请考虑增加新的构建包和 pod 模板。
这里有如何创建一个新的构建包的指导 —— 如果有任何不清楚的请加入社区并提问，我们很乐意帮助！
最好的开始就是 快速开始 应用。你可以当作一个测试的样例工程。因此，创建或查找一个合适的例子工程，然后导入。
然后，如果不存在的话，手动添加 Dockerfile 和 Jenkinsfile 。你可以从当前构建包文件夹开始 —— 使用相似的语言或框架。
如果你的构建包使用了 pod 模板 中不存在的构建工具，你需要提交一个新的 pod 模板，还可能需要一个新的构建容器景象。</description>
    </item>
    
    <item>
      <title>Pod 模板</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/architecture/pod-templates/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/architecture/pod-templates/</guid>
      <description>我们使用申明式（declarative）Jenkins 流水线实现 CI/CD ，每个应用或者环境的 git 库源码中有 Jenkinsfile。
我们使用 Jenkins 的 kubernetes 插件，使得在 Kubernetes 中为每次构建启动一个新的 pod —— 感谢 Kubernetes 给了我们一个用于运行流水线的伸缩的代理池。
Kubernetes 插件使用 pod templates 定义用于运行 CI/CD 流水线的 pod，包括：
 一个或多个构建容器，用于运行命令（例如：你的构建工具，像 mvn 或 npm ，还有流水线的其它部分的工具，像 git, jx, helm, kubectl 等等 永久存储卷 环境变量 可以写到 git 仓库、docker 注册表、maven/npm/helm 仓库等等的 secret  参考 Pod Templates Jenkins X 带有一套给支持的语言和运行时的默认 pod 模板，在你的 build packs中，命名类似于：jenkins-$PACKNAME。
例如 maven build pack 使用的 pod 模板时是 jenkins-maven。
然后，我们就可以 在 Jenkinsfile 中引用 pod 模板名称，在申明式流水线中使用这样的语法 agent { label &amp;quot;jenkins-$PACKNAME } ，例如：</description>
    </item>
    
    <item>
      <title>Docker Registry</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/architecture/docker-registry/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/architecture/docker-registry/</guid>
      <description>为了能够创建和发布 docker 镜像，我们需要使用 Docker Registry。
默认，Jenkins X 会在系统命名空间中带一个 Docker Registry，以及 Jenkins 和 Nexus。当 Docker Registry 运行在你的 Kubernetes 集群中，它会在集群内部使用，它很难通过带有自签名证书的 HTTPS 暴露 —— 因此，在你的 Kubernetes 集群服务中，我们默认使用 insecure 的 Docker Registry。
使用不同的 Docker Registry 如果你使用公有云的话，可能希望利用你的云服务商的 Docker Registry；或者复用你已有的 Docker Registry。
为了指定 Docker Registry 的主机、端口，你可以使用 Jenkins 控制台：
jx console  然后，定位到 管理 Jenkins -&amp;gt; 系统配置，并修改环境变量 DOCKER_REGISTRY 指向你选择的 Docker Registry。
另一种方法是，把下面的内容添加到你的自定义 Jenkins X 平台 helm charts 的values.yaml 文件中：
jenkins:Servers:Global:EnvVars:DOCKER_REGISTRY:&amp;#34;gcr.io&amp;#34; 更新 config.json 下一步，你需要为 docker 更新 config.json 中的认证。</description>
    </item>
    
  </channel>
</rss>
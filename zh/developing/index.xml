<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>研发 on Jenkins X</title>
    <link>https://hferentschik.github.io/jenkins-x-website/zh/developing/</link>
    <description>Recent content in 研发 on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 01 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hferentschik.github.io/jenkins-x-website/zh/developing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>创建 Spring Boot</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/developing/create-spring/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/developing/create-spring/</guid>
      <description>如果你在开发基于Java的微服务，那么，你可能正在用流行的Spring Boot。
你可以利用Spring Boot Initializr创建Spring Boot应用，然后通过执行命令 jx import 来导入Jenkins X。
然而，另外一个快速自动化的方式，是通过执行 jx create spring 命令实现：
$ jx create spring -d web -d actuator 参数 -d 允许你指定希望添加到 Spring Boot 应用中的依赖。
我们强烈建议你总是包括依赖 actuator 到你的 Spring Boot 应用中，它可以为 Liveness and Readiness probes 提供健康检查。
命令 jx create spring 的步骤如下：
 在子目录中创建一个新的 Spring Boot 应用 把你的源码加入到git库中 在 git 服务，例如 GitHub,添加 git 远程库 推送代码到 git 远程库 添加默认的文件：  Dockerfile 把你的应用构建为 docker 镜像 Jenkinsfile 实现 CI / CD 流水线 在 Kubernetes 中通过 helm chart 运行你的应用  为你的 Jenkins 在 git 远程库上注册 webhook 为你的 Jenkins 添加 git 库 首次触发流水线  </description>
    </item>
    
    <item>
      <title>快速开始</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/developing/create-quickstart/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/developing/create-quickstart/</guid>
      <description>你可以由预制的应用开始一个项目，而不是从头开始。
你可以通过命令 jx create quickstart ，从我们预制的快速应用列表中创建一个新的应用。
$ jx create quickstart 然后，根据列表选择一个。
如果你清楚列表中你所需要的语言，可以进行如下过滤：
$ jx create quickstart -l go 或者使用文本过滤器对项目名称做过滤：
$ jx create quickstart -f http 当你选择快速开始时的细节 一旦你选择项目并命名后，下面的步骤会自动完成：
 在子目录中创建应用 把你的代码添加到 git 库中 在 git 服务上添加远程库，例如： GitHub 推送代码到远程库 添加默认文件：  Dockerfile to build your application as a docker image Dockerfile 把你的应用构建为 docker 镜像 Jenkinsfile to implement the CI / CD pipeline Jenkinsfile 实现 CI / CD 流水线 在 Kubernetes 中通过 helm chart 运行你的应用  为你的 Jenkins 在 git 远程库上注册 webhook 为你的 Jenkins 添加 git 库 首次触发流水线  快速开始的原理？ 快速开始的源码托管在 the jenkins-quickstarts GitHub organisation。</description>
    </item>
    
    <item>
      <title>导入</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/developing/import/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/developing/import/</guid>
      <description>如果你已经有一些源码，希望导入 Jenkins X，你可以使用 jx import 命令。
$ cd my-cool-app $ jx import 导入将会执行下面的动作（提示你按照这个方法来）：
 如果你的源码还不在 git 库中，添加进去 在给定的 git 服务上创建一个远程库，例如 GitHub 把你的代码推送到远程 git 服务 添加任何需要的文件到你的工程中，如果不存在的话：  Dockerfile 把你的应用作为 docker 镜像进行构建 Jenkinsfile 实现持续集成、持续构建流水线 helm chart 让你的应用在 Kubernetes 中运行  为你们团队的 Jenkins 注册一个 webhook 到远程 git 仓库 为你们团队的 Jenkins 添加这个 git 仓库 首次触发流水线  避免 docker + helm 如果你正在导入的仓库而不需要创建 docker 镜像，你可以使用命令参数 --no-draft ，就不会使用 Draft 默认的 Dockerfile 和 helm chart。
通过 URL 导入 如果你希望导入的工程已经在 git 远程库中，那么，你可以使用参数 --url：</description>
    </item>
    
    <item>
      <title>浏览</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/developing/browsing/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/developing/browsing/</guid>
      <description>如果你之前用过 Kubernetes，你可能使用过 kubectl 命令查看 Kubernetes 资源：
kubectl get pods Jenkins X 的命令行工具，jx，和 kubectl 看起来相似，并且可以让你看到所有的 Jenkins X 资源。
查看 Jenkins 控制台 如果你熟悉 Jenkins 控制台，那么你可以使用 jx console ：
jx console 就会打开一个浏览器。
流水线 要查看当前流水线使用 jx get pipelines:
jx get pipelines 流水线构建日志 通过 jx get build logs 查看当前流水线构建日志：
jx get build logs 你当前看到的是所有能看到的流水线。
你可以通过下面快速过滤
jx get build logs -f myapp 或者，你希望指定
jx get build logs myorg/myapp/master 流水线活动 为了查看当前流水线的活动 jx get activities：
jx get activities 如果你想要观察你的应用 myapp，你可以使用：</description>
    </item>
    
    <item>
      <title>Kubernetes 上下文</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/developing/kube-context/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/developing/kube-context/</guid>
      <description>Kubernetes 命令行工具 kubectl 通过本地文件 ~/.kube/config（会在 $KUBECONFIG 的文件） 记录你使用的 Kubernetes 集群和命名空间。
如果你想要改变命名空间，你可以使用 kubectl 命令行：
kubectl config set-context`kubectl config current-context` --namespace=foo 然而 jx 还提供了很多有用的命令，用来改变集群、命名空间或环境：
切换环境 使用 jx environment 来切换 环境
jx environment 你将会看到当前团队的环境列表。使用方向键和回车来选择你想要切换的环境。或者按下 Ctrl+C 终止，不切换环境。
或者，如果你知道想要切换的环境，可以直接把它作为参数：
jx env staging 切换命名空间 使用 jx namespace 在 Kubernetes 不同的命名空间之间进行切换。
jx namespace 你会看到 Kubernetes 集群中所有命名空间的列表。使用方向键和回车选择你想要切换的。或者，按下 Ctrl+C 中断，不切换命名空间。
或者，如果你知道想要切换的 Kubernetes 命名空间，可以直接把它作为参数：
jx ns jx-production 切换集群 使用 jx context 在不同的 Kubernetes 集群（或者上下文）之间切换。
jx context 你会得到当前机器上所有上下文的列表。使用方向键或者回车选择你想要切换的。或者，按下 Ctrl+C 中断，不切换集群。</description>
    </item>
    
    <item>
      <title>升级</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/developing/promote/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/developing/promote/</guid>
      <description>Jenkins X 的升级策略配置为 Auto 时，持续部署流水线通过配置好的环境来自动化升级版本。默认情况下，Staging 环境使用自动升级，生产环境使用手动升级。
要手动升级应用的一个版本到特定环境上，可以使用命令 jx promote。
jx promote myapp --version 1.2.3 --env production 该命令会等待升级完成，并记录过程的详细信息。你可以通过参数 --timeeout 为升级等待设置超时时间。
例如：等待5小时
jx promote myapp --version 1.2.3 --env production --timeout 5h 你可以使用类似 20m 或 10h30m 这样的时间表达式。
反馈 如果提交注释中引用了问题（例如：通过文本 fixes #123），那么，Jenkins X 流水线会自动生成类似 jx 发布 的发布记录。
同样的，升级到 Staging 或 生产 环境中的提交日志中也会自动关联每个修复的问题，包括有发布日志和应用所运行环境的链接。</description>
    </item>
    
    <item>
      <title>预览</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/developing/preview/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/developing/preview/</guid>
      <description> 我们强烈建议使用 预览环境 ，使得在变更合并到 master 之前尽快地得到反馈。
通常，预览环境是由 Jenkins X 的流水线中自动创建的。
然而，你可以使用 jx 通过命令 jx preview 手动创建一个预览环境。
jx preview 创建预览环境时都做了什么  一个新的 环境 ，例如 预览 被创建时，一个 kubernetes 命名空间 会在 jx get environments 出现， 使用 jx 环境和 jx 命名空间命令 你可以看到那个预览环境是活跃的，并可以进入查看。 Pull Request 会作为预览 Docker 镜像和 chart 构建，并被部署到预览环境中 添加一条注释到 Pull Request 中，让你们团队知道该预览应用已经准备好可以测试了，并带有打开应用的链接。因此，只要点击一下就可以让你们团队成员体验预览环境！  </description>
    </item>
    
    <item>
      <title>IDE</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/developing/ide/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/developing/ide/</guid>
      <description> 作为开发人员，我们经常在 IDE 上花大量的时间来编码。Jenkins X 完全是为了帮助开发人员快速交付商业价值的，因此，我们希望使得 Jenkins X 在你的 IDE 中更加容易使用。
因此，我们有 IDE 插件来方便使用 Jenkins X。
VS Code VS Code 是一个流行的来自微软的开源 IDE。
我们已经为 VS Code 研发了插件 vscode-jx-tools。
你可以在 扩展 窗口把插件安装到 VS Code，搜索 jx 应该能查到这个扩展。
安装完后点击 重新加载，你应该就能使用了。
如果你展开 JENKINS X 导航窗口，应该能看到你创建工程的实时更新界面，还有 Pull Request 被创建或者代码被合并到了 master。
特色  浏览你所在团队的所有流水线的实时更新，包括发布或者 Pull Request 流水线的开始和结束 在 VS Code 终端内打开流水线构建日志 轻松地浏览 Jenkins 流水线页面、git 仓库、构建日志或者应用  Jenkins X 浏览器的右键点击 还有启动（停止）流水线！  通过一个命令打开 DevPods ，保持源码与云上的相同容器镜像和 pod 模板同步  </description>
    </item>
    
    <item>
      <title>问题</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/developing/issues/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/developing/issues/</guid>
      <description>Jenkins X 默认使用你的 git 提供商中的问题跟踪系统来创建和浏览问题。
例如：如果你在 GitHub 项目中的源码中，那么你可以输入 jx create issue：
jx create issue -t &amp;quot;lets make things more awesome&amp;quot;  一个新的问题就会在 GitHub 上被创建。
你可以在你的项目上通过 jx get issues 列出打开的问题：
jx get issues  使用不同的问题跟踪 如果你希望在项目中使用 JIRA，你首先需要添加一个 JIRA 服务。
你可以通过 jx create tracker server 注册你的 JIRA服务：
jx create tracker server jira https://mycompany.atlassian.net/  然后，你就可以通过 jx get tracker 来查看你的问题追踪了：
jx get tracker  然后，通过下面添加一个用户和 token：
jx create tracker token -n jira myEmailAddress  配置项目的问题跟踪 在你项目的源码中使用 jx edit config:</description>
    </item>
    
    <item>
      <title>Git 服务器</title>
      <link>https://hferentschik.github.io/jenkins-x-website/zh/developing/git/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hferentschik.github.io/jenkins-x-website/zh/developing/git/</guid>
      <description>Jenkins X 默认使用 GitHub，用于开源项目的免费公共 git 托管方案。
然而，在企业中工作时，你可能希望使用不同的 git 服务器。
你可以通过 jx get git 列出配置好的 git 服务器。
jx get git  添加一个新的 git 服务商 如果你在某个地方已经有了一个 git 服务，你可以通过 jx create git server 把它添加到 Jenkins X中：
jx create git server gitKind someURL  这里 gitKind 是某个 git 服务商，像 github, gitea, gitlab, bitbucket
企业 GitHub 要添加一个企业 GitHub 服务，尝试：
jx create git server github https://github.foo.com -n GHE  这里 -n 是 git 服务的名称。
BitBucket 要添加 BitBucket ，尝试：</description>
    </item>
    
  </channel>
</rss>